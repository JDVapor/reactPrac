{"ast":null,"code":"var _jsxFileName = \"/Users/jdvapor/Documents/rand/practiceCodingProjects/scrimba/src/HOCs/withToggle.js\";\nimport React, { Component } from \"react\"; // HOC is a function that takes a component as a parameter\n// and returns a new component wrapping the given component\n// and \"supercharging\" it by giving it some extra abilities\n\nclass Toggler extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      on: this.props.defaultOnValue\n    };\n\n    this.toggle = () => {\n      this.setState(prevState => {\n        return {\n          on: !prevState.on\n        };\n      });\n    };\n  }\n\n  render() {\n    const C = this.props.component;\n    return React.createElement(C, Object.assign({\n      on: this.state.on,\n      toggle: this.toggle\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport function withToggler(component, optionsObj) {\n  return function (props) {\n    return React.createElement(Toggler, Object.assign({\n      component: component,\n      defaultOnValue: optionsObj.defaultOnValue\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }));\n  };\n}","map":{"version":3,"sources":["/Users/jdvapor/Documents/rand/practiceCodingProjects/scrimba/src/HOCs/withToggle.js"],"names":["React","Component","Toggler","state","on","props","defaultOnValue","toggle","setState","prevState","render","C","component","withToggler","optionsObj"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CACA;AACA;AACA;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BE,KAD4B,GACpB;AACJC,MAAAA,EAAE,EAAE,KAAKC,KAAL,CAAWC;AADX,KADoB;;AAAA,SAK5BC,MAL4B,GAKnB,MAAM;AACX,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,eAAO;AACHL,UAAAA,EAAE,EAAE,CAACK,SAAS,CAACL;AADZ,SAAP;AAGH,OAJD;AAKH,KAX2B;AAAA;;AAa5BM,EAAAA,MAAM,GAAG;AACL,UAAMC,CAAC,GAAG,KAAKN,KAAL,CAAWO,SAArB;AACA,WACI,oBAAC,CAAD;AAAG,MAAA,EAAE,EAAE,KAAKT,KAAL,CAAWC,EAAlB;AAAsB,MAAA,MAAM,EAAE,KAAKG;AAAnC,OAA+C,KAAKF,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAGH;;AAlB2B;;AAqBhC,OAAO,SAASQ,WAAT,CAAqBD,SAArB,EAAgCE,UAAhC,EAA4C;AAC/C,SAAO,UAAST,KAAT,EAAgB;AACnB,WACI,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAEO,SAApB;AAA+B,MAAA,cAAc,EAAEE,UAAU,CAACR;AAA1D,OAA8ED,KAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAGH,GAJD;AAKH","sourcesContent":["import React, {Component} from \"react\"\n// HOC is a function that takes a component as a parameter\n// and returns a new component wrapping the given component\n// and \"supercharging\" it by giving it some extra abilities\n\nclass Toggler extends Component {\n    state = {\n        on: this.props.defaultOnValue\n    }\n\n    toggle = () => {\n        this.setState(prevState => {\n            return {\n                on: !prevState.on\n            }\n        })\n    }\n\n    render() {\n        const C = this.props.component\n        return (\n            <C on={this.state.on} toggle={this.toggle} {...this.props} />\n        )\n    }\n}\n\nexport function withToggler(component, optionsObj) {\n    return function(props) {\n        return (\n            <Toggler component={component} defaultOnValue={optionsObj.defaultOnValue} {...props}/>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}